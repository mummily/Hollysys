class CLDPOU : public CIECPOU  
{
public:
	CLDPOU();
	virtual ~CLDPOU();
    
	void FillEnumTypeArray(CStringArray &aEnumType);
	virtual bool ImportXml();
	virtual bool ExportXml();
	CLDPOU& operator=(CLDPOU& pLDPOU);
	virtual BOOL OnGlobalReplace(CString strFind, CString strReplace, 
		BOOL bWholeWord, BOOL bMatchCase, char &chType,BOOL bNextItem);
	virtual void OnGlobalSearch(CString strFind, BOOL bMatchCase, BOOL bMatchWholeWord);
	BOOL OnPreReplace(CString strFind, CString strReplace
					   , BOOL bWholeWord, BOOL bMatchCase, char& chType,BOOL bReplaceDown,BOOL bAllProject);
	bool GetNextID(int iID,int& iNextID);
	bool UpDateHistory (int  iID);
	bool DeleteElement();
	bool AddElement(char chAddType,int iRefID,char chType);
	bool AddParalletContact();
	bool AddLDReturn();
	bool AddLDJump();
	bool AddOutput();
	bool AddLDContact();
	bool AddBeforeNetWork();
	bool AddAfterNetWork();
	bool AddLDBox(CPoint pnt, CString str,CWnd *pWnd);
	CLDBox* MakeNewBox(CString str,CWnd *pWnd,CString strFBInstance = "");
	bool AddOperatorPin(CLDBox* pBox,int iInNum,int iOutNum);
	bool AddFBPin(CLDBox* pBox,CFunctionBlockDB* pFB);
	bool AddPRGPin(CLDBox* pBox,CFunctionBlockDB* pFB);
	bool AddFunPin(CLDBox* pBox,CFunctionBlockDB* pFB);
	bool OptionDlg();
	bool IsAllowToAddNetwork(int iRefID,int iaddCount);

	bool AddTotal(char chType);
	bool NewHeadInsteadChildren(int emType,CList<int,int>& IDList);
	void NewBranches(int iRefID,CList<int,int>& IDList,char chType);
	void NewAssign(int iRefID,CList<int,int>& IDList);
	void NewAssignInBranches(int iRefID,CList<int,int>& IDList,int iChildIndex);
	void AndOrNewBack(int iRefID,CList<int,int>& IDList);
	void NewBranchesAndAssign(CList<int,int>& IDChoseList,CList<int,int>& IDPasteList);
	void NewBandAssign(int iRefID,CList<int,int>& IDPasteList);
	int  GetChildPositionOFOrElement(CList<int,int>& IDChoseList);
	void MergeConditionElement(int iMergeID1,int iMergeID2,int iParentID);
	void MergeMulConditionElement(int iMergeID1,int iMergeID2);
	bool ReleaseChildrenInsHead(CList<int,int>& IDList);
	int	GetNewID();
	char IsAbleToDelete();
	char IsAblePaste(char chPasteType, int& iID);
	char IsAbleMIO(char chPasteType,int& iID);
	char IsAbleMIA(char chPasteType,int& iID);
	char IsAbleSIO(char chPasteType,int& iID);
	char IsAbleSIA(char chPasteType,int& iID);
	char IsAbleEO(char chPasteType,int& iID);
	char IsAbleEA(char chPasteType,int& iID);
	char IsAbleEC(char chPasteType,int& iID);
	char IsAbleBB(char chPasteType,int& iID);
	char IsAbleEB(char chPasteType,int& iID);
	char IsAbleEAssign(char chPasteType,int& iID);
	char IsAbleEOutput(char chPasteType,int& iID);
	char IsAbleER(char chPasteType,int& iID);
	char IsAbleEJ(char chPasteType,int& iID);
	char IsAbleEBracket(char chPasteType,int& iID);
	char IsAbleORB(char chPasteType,int& iID);
	char IsAbleOIB(char chPasteType,int& iID);
	char IsAbleIIB(char chPasteType,int& iID);
	char IsAbleIIBox(char chPasteType,int& iID);
	char IsAbleOIBox(char chPasteType,int& iID);
	char IsAbleEN(char chPasteType,int& iID);
	char IsAbleMN(char chPasteType,int& iID);
	char ChoiceType(CList<int,int>* pIDList);
	bool LMouseClick(CPoint point,bool bShiftTag, 
		unsigned char& uchSelType, int& iID, char& chPinIndex);
	void ClearChosenData(bool bShiftTag);
	bool MouseClick(CPoint point, unsigned char& uchSelType, int& iID, char& chPinIndex);
	bool ShiftLMouseClick(CPoint point);
	bool GetSelectList(CLDElement*& pCurrentElement,
		CLDElement*& pLastElement, CLDElement*& pParentElement);
	bool IsCorrectMulSel(CLDElement* pCurrentElement, CLDElement*pLastElement);
	bool IsModifyAble(int iTag);
	CLDElement* GetElement(int iID);
	void		SetElement(CLDElement* pLDElement);
	void		RemoveElement(CLDElement* pLDElement);
	void		DelElementClear(int id);
	void		ClearPasteElement();
	bool		CalcElementSize(CDC* pDC);
	bool		CalcElementPosition(CPoint  pntOriginal);
	bool		Draw(CDC *pDC,CRect rectScreen,bool bOnLineFlag);
	bool        DrawOnlinePOU(CDC *pDC,CRect rectScreen);
	bool		DrawSel(CDC* pDC,bool bMulSel);
	void		ShowHideBoxPin(CString strBoxName,CArray<char,char>*pArray);

	bool CutElement(CFixedSharedFile &sf);
	bool CopyElement(CFixedSharedFile &sf);
	bool ReadClipBoard(CFixedSharedFile &sf);
	CLDElement* CreateElement(int emType);
	bool Undo();
	bool Redo();
	void CompareUnReToFact(CLDElement* pLDElement);
	bool CleanUnReList();
	CLDElement* Factory(CLDElement* pLDElement);
	bool WriteText(CString& strOld,CString strNew, int ID, unsigned char& uchSelType,
		int iPinIndex, bool &bFlag,CString& strAliasName,CString& strComment);
	void RectForText(CRect& rect,CDC* pDC,CString str,int iLength,int iFontHeight,int iReserveLen = 0,bool bIsRCal = false);
	void RemoveAllOnlineData();
	void CollectOnLineData(CRect rect);
	void SetVarInMonitorList(CBaseDB* pVar);
	void UnFoldArray(CString strName);
	void Serialize(CArchive& ar);
	void GetInvokeArray1();
	void ModifyTheChosen(CList<int,int>& tempList);
	COLORREF GetTextAndColor(CString &strText,bool &bIsForce,CElementTextInfo& pElementTextInfo,bool bCalcMaxArea = false,CBaseDB* pInPutVar = NULL);
	void FindOnlineVar(CRect rect);
	void CalcRelation();
	CLDView* GetView( );
	void SetView(CLDView* pView);
	void ChangeBoxName(CString strBoxName, CString strNewName);
	bool FindCircleEle(CRect,CLDElement*&,CLDElement*&);//鼠标圈选
	void UpdateEditAndDestroy(bool bShowView);//AT-I-00207
	bool IsAbleENSwitch(CLDElement* pElement);
	void ChangeTextForShow(CString& str);
	void AddAssistTailNetwork(int iCurrentNetwork);
	void FindErrorElementPosition(CElementPosition *pElementPos);

	 BOOL OnReplace(CString strFind, CString strReplace, BOOL bWholeWord
		, BOOL bMatchCase, char& chType);
	 void OnSearch(CString strFind, BOOL bMatchCase, BOOL bMatchWholeWord);

	//更新相关
	void UpdataOneBox(CLDBox*& pBox,CString strNewName);
	//库变化或当前变化接口
	virtual void UpdataBox(CString strBoxName);
	void UpdateAdressString(char chType = 1);
	//更新引脚隐藏的接口，根据FB对应的变量
	virtual void UpdataBoxToFBVar(CString strInstName,CString strTypeName,char cType);
	static void SetLDOptionInfo();
	
	//预编译start
	void FindVars();
	BOOL CheckPOUErrors();
	BOOL CompilePOU();
	void UpdataTailLogic(CLDElement *pElement);
	CString GetPOUCode();
	bool GetLocalSymbol(CString strName,HccSymbol*& pLocalSym);
	void GetPageSize();
	//预编译end
	void LDViewZoom(float ratio);//缩放功能
	//根据变量的别名，更新注释和变量名
	void UpdateElementContentByAlias(CString strAliasText,CLDElement* pElement,CLDInPin* pinPin,CLDOutPin* poutPin);
	void UpdateElementContentByVar(CString strText,CLDElement* pElement,CLDInPin* pinPin,CLDOutPin* poutPin);//根据变量域的内容更新CElement内容
    //根据引脚隐藏属性更新Box引脚的可见属性
	//modified by ZGH on 2012.04.24
	bool UpdateBoxPin(CLDBox *pLDBoxElement, CList<CPinNode*,CPinNode*>  *pInputNodeList, CList<CPinNode*,CPinNode*> *pOutputNodeList,bool bBackUp = true);
	//modified end
	//变量属性发生变化时，更新元素相关内容的显示
	void ChangeElementContent(CLDElement* pLDElement,CString strVarName,char chType);
	//打印到PDF
	void ExportToPDF();
	void DrawLDToPdf(PDFlib* pdf);
	void DrawLDElementToPdf(PDFlib* pdf);
	//跳过语法检查阶段，直接进入中间代码翻译阶段时，需要生成元素关联变量的信息
	void CreateVarInfo();
	void AddArrayOnlineVar(CString strText,CBaseDB *pBaseDB,CElementTextInfo* eleTextInfo);
	bool FindPouStr(SearchAndReplace& sechAndRplc);
    void PouStrReplace(SearchAndReplace& sechAndRplc);
	void PouGlobalSerch(CString strFind,BOOL bMatchCase, BOOL bMatchWholeWord);
	//保持与变量定义的同步性
	virtual void UpdateForSyncWithVar();
	// 查找时，返回选中的字符串值
	virtual CString GetSelectStringWhenFindReplace();
	bool IsUpdateByAlias(CString strName,CString strAlias,CString strComment,CString strNew);
	 CString GetNetWorkNumber(int id);
	 //退出仿真或者在线时，清空进入仿真或者在线时，生成的直接地址变量的信息
	 void RemoveDirectVar();
	 //added by ZGH on 2012.08.07
	 static int ImportXMLPOUContent(CLDPOU* pLDPOU,CString strPathName,XMLTagNode* pTagNode = NULL);
	 //added end
	 //add by YXY for POUCMP on 2012.12.12
	 void CMPFillElement(CLDPOU* pPOU1,CLDPOU* pPOU2);
	 void POUCmp(CLDPOU *pPOU);
    //end add by YXY for POUCMP on 2012.12.12
	 //add by YXY for 右键查看主变量信息 on 2013.5.10
	 void ShowMainVarDetail();
	 bool isAbleShowMainVarDetail(CLDElement *pLDElement);
	 //add end by YXY for 右键查看主变量信息 on 2013.5.10 
     
	 //add by YXY for 右键跳转到声明处 on 2013.11.14
	 bool isAbleLocateMainVar(CLDElement *pLDElement);
	 void LocateMainVar();
	 //add end by YXY for 右键跳转到声明处 on 2013.11.14

	 //add by YXY for 右键打开点面板 on 2013.11.14
	 bool isAbleShowMainPanel(CLDElement *pLDElement);
	 void ShowMainPanel();
	 //add end by YXY for 右键打开点面板 on 2013.11.14
public:
	//comment by ZGH on 2012.06.28 for bug 2855
	/*virtual void GetCountOfWarningAndError(int &iWarningCount, int &iErrorCount);*/
	//end comment
	void OnInitialUpdate();
	int GetMaxVofOR(CLDElement *pOR);
	int GetMaxVCount();
	int GetMaxHCount();
	int GetMaxHofOR(CLDElement *pLDOR);
	int GetOutputNumber(int iNetworkID);
	int GetMaxVofBranches(CLDElement* pBranches);
	int GetMaxHofBranches(CLDElement* pBranches);
public:
	void ClearElementVar();
	//added by ZGH on 2012.08.07
	int ImportPOULogicContent(XMLTagNode* pCurrentTagNode);
	BOOL WriteXMLContent(CFile * pFile,CString& strContent);
	virtual BOOL WriteXMLPOULogicContent(CFile* pFile);
	/*virtual int ExportXMLPOUContent(CString strPathName);*/
	int GetOutputNumFromXML(XMLTagNode* pElementChildrenTagNode);
	int CreateBoxFromXML(XMLTagNode* pCurrentChildTagNode,CLDElement *pLDElement,CLDBox*& pBox,CLDNetwork* pLDNetwork,bool bisUnderAssign,bool &isBoxNegate);
	int ImportElementFromXML(XMLTagNode* pElementChildrenTagNode,CLDElement* pLDElement,CLDNetwork* pLDNetWork,bool &bExistOutput);
	//added end
	CString GetPaperType();
	void SetPagesize(CString strpagesize);
	void SetViewSizeAccordToPaperSize(int x, int y);
	void SetLDViewSize(CSize size);
	//将编译过程中的错误信息显示于信息窗口中
    void SendErrorInfoToOutputInCompile(CPOU *pPOU);
	//缩放时，重新设置PouDetail坐标位置
	void SetPouDetailPosition( float fRation);
    //added by ZGH on 2012.05.25
	//增加、删除POU时，更新调用该POU的块类型
	virtual void UpdataBoxType(CString strBoxName,CString strNewName);
	//added end
	void ImportM5TOM6RefeshBoxContent();
	void M5TOM6Replace();
	void M5TOM6ReplaceElementText(CString &strText);
	void RefreshImportBox();
	void GetElementIDFromList(CList<int, int>&listA, CList<int, int>&ListB);
    
public:
	HccTreeNode* m_pNodeEnd;	//记录树的尾节点
	CLDView* m_pView;
	SearchAndReplace sechAndRplc_t;//当执行单次查找替换时记录查找到的位置
	int m_icheckedCount;

	//打印相关的数据成员
	CPOUDetail* m_pPoudetail;
	//View Size
	CSize m_szLDView;
	//paper type
	CString m_strPaperType;
	//纸张类型对应的纸张大小(定值，不会改变)
	CSize m_szLDViewPageSize;
	
	UINT m_uiErrorCount;
	UINT m_uiWarnCount;
	bool m_bIsSecondRe;
	bool m_bIsFindNext;
	//粘贴的变量需要自动声明
	CList<CString,CString>		m_autoVarList;
	CCalclateManager m_calcManager;
	CList<CLDElement*,CLDElement*> m_ReDoList; //储存重做表中信息
	CList<CLDElement*,CLDElement*> m_UnDoList;//储存撤销表中元素信息
	int							m_iFontHeight;//基准长度
	CMap< int, int, CLDElement*, CLDElement* >				m_LDELementMap;
	//add by YXY for POUCMP on 2012.12.10
	CArray<CLDElement*,CLDElement*>     m_CMPFillElement;
	CArray<int,int>                     m_NetCompareResult;
	//add end by YXY for POUCMP 2012.12.10
	CList<int,int>				m_pasteIDList;
	CList<int, int>				m_chosenIDList;
	CLDElement*					m_pChooseElement;
	CLDElement*					m_pShiftElement;
	unsigned char				m_uchSelType;	//选中类型		
	char						m_chPinIndex;	//选中引脚的索引
	CRect						m_POUNameRect;//POU名框
	CRect						m_commentRect;//注释框
	CString                     m_strComment;
	CString                     m_strTempComment; //ADD by WCJ 用于处理POU注释多行显示时无法撤销恢复
	
	CRect						m_circleRect;//用于圈选状态
	char						m_chReplaceExist;//用于判断替换是否在本POU发生
	int							m_iStartNetWorkIndex;//记录处于视图中的第一个可见网络节点的索引（子成员列表）
	int							m_iEndNetWorkIndex;//记录处于视图中的最后一个可见网络节点的索引（子成员列表）
	
	bool						m_bFirstPhase;//checkErrors错误检查是否正确

	int							m_iNetworkID;//被激活的网络结点

	
	static bool						m_bShowAddress;//与选项对应
	static bool						m_bDirToVar;
	static bool						m_bNetWorkComment;//网络节点的注释开关
	bool m_bIsGlobalDBViewShow;    //是否显示变量定义View
	CLDElement* m_pPositionElement; //在线查找时定位到的元素
	CLDInPin*   m_pPositionInPin;   //在线查找时定位到的输入引脚
	CLDOutPin*  m_pPositionOutPin;  //在线查找时定位到的输出引脚
	int         m_iStart;           //定位时的起始位置
	int         m_iLength;          //定位元素的长度
	CMap< int,int,CLDElement*,CLDElement* >	m_collectDirectVarElementMap;//储存在线时关联的直接地址元素信息
	//added by huweiguo 2015.5.6 for xuqiu
	float m_ratio;
	//end added    

	//预编译检查跳转错误的临时List,存储jump元素的指针
	CList<CLDElement*,CLDElement*>	m_jumpTargetList;
	//预编译检查跳转错误的临时map,存储label的文本信息，关键字为network元素的id
	CMap<CString,LPCTSTR,INT,INT>	m_labelMap;
	//预编译生成中间树时候，使用的跳转的对应的指针
	CMap<CString,LPCTSTR,HccTreeNode*,HccTreeNode*> m_hccLabelNode;
	CMap<CString,LPCTSTR,HccSymbol*,HccSymbol*> m_hccJmpCountNode;
};