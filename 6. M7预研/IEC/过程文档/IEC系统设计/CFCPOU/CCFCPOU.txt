class CCFCPOU : public CIECPOU  
{
public:
    //add by qwq
	void OnF4();
	void AddVarNode(CTreeCtrl * ptree,HTREEITEM hRootItem,CBaseDB *pVar);
	void OnShowPanel(void);
    //end add by qwq
	void DestroyFont();
	BOOL CheckExecuteOrderChangedFromList(ExecuteOrderList *pList);
	void CollectElementsExecuteOrder(ExecuteOrderList *pList);
	void SetPrintShape(CDC *pDC);
	BOOL GetSycWithVarFlag();
	void ResetEditPosWhenOnLine();
	BOOL CheckSplitterWndHide();
	void DECFBRow();
	void INCFBRow();
	BOOL CheckCFCElementCrossWithRect(const CRect rect);
	BOOL CheckCFCLineCrossWithRect(const CRect rect);
	BOOL CheckNullCFCElementInRect(const CRect rect);
	CRect GetMaxSizeRectWithCFCElement();
	void ResetCFCElementShape();
	char GetCFCElementEditState(CCFCElement *pElement);
	void ShowBoxDetail();
	CString GetSelectStringWhenFindReplace();
	void OnBoxView();
	void DrawPrintPage(CDC *pDC,CRect rect);
	void AdjustCFCViewToPage(CString strpagesize);
	void InitPOUDetail();
	void ResetCFCViewSize();
	void SetInsertModel(char chMode);
	void FillDrawElementList();
	CSize GetPaperSize(CString strPaperType);
	void UpdateForOptionChanged();
	void UpdateForSyncWithVar();
	BOOL CFCCommentTextNoChange(CCFCElement *pCFCElement, CString str);
	BOOL CFCAliasTextNoChange(CCFCElement *pCFCElement,CString str);
	void ToggleSplitterWnd(int iSide=0);
	void SetTextIncreIndexOfFindIndex(int index);
	int GetTextIncreIndexOfFindIndex();
	BOOL GetPOUDetailEditState();
	int CheckReplaceCondition(CString &strFind,CString &strReplace,char chType);
	void FixElementPositionWhenCFCFind(CElementPosition *pElementPos);
	CString GetCFCSelectStringWhenFindReplace();
	void SetTextIndexOfFindIndex(int iIndex);
	void FixFindIndex(CCFCElement *pCFCElement, CString strFind, char chType);
	void SetElementFindIndex(CCFCElement *&pCFCElement,int order,CString strFind, BOOL bWholeWord, BOOL bMatchCase);
	CCFCElement * GetCurrentFindIndexElement(CString strFind,BOOL bWholeWord, BOOL bMatchCase, char chType);
	int GetIndexOfCFCElementInDrawList(CCFCElement *pCFCElement);
	void DoReplaceByFindIndex(CString strFind,CString strReplace);
	int FindSubStrAfterIndex(int index,CString strFind,CString strAim,BOOL bWholeWord, BOOL bMatchCase);
	int GetTextIndexOfFindIndex();
	char GetTextTypeOfFindIndex();
	CCFCElement * GetNextCFCElementByFindIndex(int &order);
	BOOL CheckEndOfSingleElementWhenFindNext(FindInfo *pFIindex, CString strFind, BOOL bWholeWord, BOOL bMatchCase);
	void SetFindIndex(int id, int order,char type,int index,int length);
	BOOL SetFindIndex(CCFCElement *pCFCElement,int order,CString strFind, BOOL bWholeWord, BOOL bMatchCase);
	void InitFindIndex();
	CCFCElement * CFCReplace(CString strFind, CString strReplace, BOOL bWholeWord, BOOL bMatchCase, char chType);
	void FixFindResultTextPosition(CCFCElement *pCFCElement,char type,int index,int length);
	void SetDescriptionOfCFCFindResult(FindInfo *pInfo,	CString &description, CString &strfindcontent);
	void ProduceOutputInfoOfSearchResult();
	void ClearFindInfoList();
	void ReleaseFindInfoList();
	void FillFindInfoToList(FindInfo *pInfo);
	int CheckFindCondition(CString &strFind);
	BOOL IsLinkedToInOutOfFunBox(CCFCOutputPin *pOutputPin);
	void DealWithPOUDetailOnLButtonDown();
	void DealWithPOUDetailOnLButtonDBClick(CPoint pt);
	void DealWithAutoVarDeclare(CString str,char chType);
	CCrossRecord* CreateCrossRecord(CString strVarName,CCFCElement *pCFCElement);
	void RecordCrossReference(CCFCElement *pCFCElement,CElementTextInfo *pTextInfo,int referType);
	void RecordCrossReference();
	//amended by huweiguo 2013.05.21 for MACS650_UT-00737
	CString GetElementTextToGetTipContent(CPoint pt,CString&pstrtype);
	//end amended
	void ReSetExecuteOrderWhenDeleteElement(CCFCElementList *pList,CCFCElementList *pSumList);
	void DealWithSetPinVisibleCmd(CCFCBox *pCFCBox);
	void DealWithCFCToolTip(CPoint pt);
	CToolTipCtrl * GetCFCToolTipCtrl();
	CModifyTextEdit* GetEditCtrl();
	// added by huweiguo 2012.04.20 for 点面板
	void CollectChangedPinNode(CCFCElement *pElement, CList<CPinNode*,CPinNode*> *pInputNodeList,CList<CPinNode*,CPinNode*> *pOutputNodeList, CTypedPtrList<CObList,CCFCPin*> *pPinList);
	//end added
	void SetPinVisibleAttrib(CPoint ptLP,CRect clientrect);
	void InsertElementToListAndSort(CCFCElement *pElement, CCFCElementList *pElementList);
	int GetInputOutputCommentShowDirection();
	void FillInputElementToList(CCFCElementList *pList);
	void DrawOnPDF(PDFlib &pdf);
	void OnExportPDF(PDFlib &pdf);
	BOOL GetShowFBCommentFlag(CCFCElement *pCFCElement = NULL);
	BOOL GetShowFBAliasFlag(CCFCElement *pCFCElement = NULL);
	BOOL GetCommentEditState();
	BOOL GetAliasEditState();
	BOOL GetShowInputOutputCommentFlag(CCFCElement *pCFCElement=NULL);
	BOOL GetShowInputOutputAliasFlag(CCFCElement *pCFCElement=NULL);
	void ClearRedoUndoList();
	void ResetCmdLineWhenLibChange(CCFCLine *pNewLine,CCFCLine *pOldLine);
	BOOL OnPreReplace(CString strFind, CString strReplace, BOOL bWholeWord, BOOL bMatchCase, char& chType, BOOL bReplaceDown,BOOL bAllProject);
	void ResetInputOutputElementOffLineShape();
	static int ImportXMLPOUContent(CCFCPOU *pCFCPOU, CString strPathName, XMLTagNode* pTagNode = NULL);
	CCFCBox * GetBoxDragedFromLib();
	CCFCElement * GetCFCElementPrepareToInsert();
	void OnF2();
	CDlgVarDetail * GetDetailDlg();
	void GetInputElementTextInfoByInputPin(CCFCInputPin *pInputPin,CElementTextInfo *pTextInfo);
	BOOL AreTwoArrayVarCompatible(CArrayDB*pArrayVar1,CArrayDB*pArrayVar2);
	CBaseDB* GetInputVarByInputPin(CCFCInputPin *pInputPin);
	BOOL DoStopCFCEditState();
	CPoint GetTopLeftPointofElementsRect(CCFCElementList *pList);
	void ChangeBoxName(CString strBoxName, CString strNewName);
	void UpdataBox(CString strBoxName);
	void OnSetPinAttrib();
	void SetRegist(BOOL reg);
	BOOL CFCElementTextNoChange(CCFCElement *pCFCElement,CString str);
	CCFCElement* GetSingleSelectElement();
	void CFCReplaceAll(CString strFind, CString strReplace, BOOL bWholeWord, BOOL bMatchCase);
	CCFCElement * CFCFindNext(CString strFind, BOOL bWholeWord, BOOL bMatchCase, char chType);
	CString GetInputTypeByInputPinIndex(int iIndex,CCFCBox *pCFCBox);
	BOOL OnReplace(CString strFind, CString strReplace, BOOL bWholeWord, BOOL bMatchCase, char& chType);
	void OnSearch(CString strFind, BOOL bMatchCase, BOOL bMatchWholeWord);
	CCFCElement * GetBottomRightElementInList(CCFCElementList *pList);
	//added by huweiguo 2015.10.29 for bug 18173
    CCFCElement * GetBottomElementInList(CCFCElementList *pList);
	CCFCElement * GetRightElementInList(CCFCElementList *pList);
	//end added
	void OnContextMenu(CWnd* pWnd, CPoint point);
	void OnUpdateCFCMenuEdit(CCmdUI* pCmdUI);
	enum_INSERTELEMENT_TYPE GetInsertModel();
	int GetSelectState();
	void DestroyEditState();
	void RemoveCFCElementFromSelectMap(CCFCElement *pCFCElement);
	BOOL IsRectCross(CRect &rect1, CRect &rect2);
	void OnCFCLocalFind();
	void OnlyEditAllSelected();
	CString GetPaperType();
	void SetViewSizeAccordToPaperSize(int x, int y);
	void SetPagesize(CString strpagesize);
	void SetViewHeight(int height);
	void SetViewWidth(int width);
	COLORREF GetCFCColor(char color);
	void RefreshFBBoxVar();
	void RefreshTempVarForBox(CCFCBox *pCFCBox);
	CString GetInputTypeOfBasicMath(CCFCBox *pCFCBox);
	void DealWithDragElementFromLibOnMouseLeave();
	void DealWithDragElementFromLibOnLButtonDown(COleDataObject *pData,CPoint ptLogic,DROPEFFECT &dropeffectRet);
	void DealWithDragElementFromLibOnMouseMove(COleDataObject* pData,CPoint ptLogic,DROPEFFECT &dropeffectRet);
	void OnReceiveWndMsg(CPoint ptLogic);
	BOOL IsTypeConversionOperator(CString strBoxType);
	COleDataObject * GetDragOleData();
	void SetDragOleData(COleDataObject * pData);
	void SetViewPostionToErrorElement(CCFCElement *pCFCElement);
	void FindErrorElementPosition(CElementPosition *pElementPos);
	void FindCFCElementByName(CString str,BOOL wholewordflag,BOOL matchcaseflag);
	void OnlyEditCut();
	void OnlyEditPaste();
	void OnlyEditCopy();
	void OnlyEditDel();
	BOOL GetElementMoveState();

	float GetCFCViewCurrentRatio();
	void CollectVisiblePODVars();
	void CFCViewZoom(float ratio,CDC *pDC = NULL);
	CViewDropTarget * GetDropTarget();
	tagHccTreeNode* GetInputRightValueTreeNodeByInputPin(CCFCInputPin *pInputPin);
	BOOL GetFBNameEditState();
	BOOL LookupElementByID(int iID,CCFCElement *&pCFCElement);
	//创建一个中间代码语法树结点，并初始化之
	CString GetInputTypeOfBitShift(CCFCBox *pCFCBox);
    //////////////////////////////////////////////////////////////////
    //amend by huweiguo 2012.01.18 for line
	BOOL IsGridInCFCElementMap(BOOL flag,CRect rect);
    //added by huweiguo 2012.01.18 for line
	BOOL GetCrossFlag(CRect rect,CCFCInputPin*);
    //////////////////////////////////////////////////////////////////
	void SetAllElementSelected();
	CSize GetViewSizeOnlyWithGrid();
	CCFCElement * GetTopLeftElementInList(CCFCElementList *pList);
	void SetPasteIndex(int index);
	CCFCElement * GetNeighborUponElement(CCFCElement *pCFCElement,CPoint pt);
	CCFCElement * GetNeighborUnderElement(CCFCElement *pCFCElement,CPoint pt);
	CCFCElement * GetTopMostShowOrderofElement(CCFCElement *pCFCElement,CPoint pt);
	int GetOriginVerticalGridCount();
	int GetOriginHorizonGridCount();
	void ResetAllElementLineShape();
	//added by huweiguo 2012.04.13 for bug 
	void ResetMoveElementLineShape();
	//end added
	void SetDefaultView();
	BOOL OnMouseWheel(UINT nFlags, short zDelta, CPoint pt);
	void DrawDragBox(CDC &dc, CRect &rect, BOOL xor = TRUE);
	BOOL IsElementInRect(CCFCElement *pCFCElement,CRect rect);
	BOOL GetHitCheck();
	void SetHitCheck(BOOL check);
	BOOL GetShowENODefault();
	void SetShowENODefault(BOOL show);
	LOGFONT GetFont();
	void SetTextFont(const LOGFONT *font);
	BOOL GetShowGrid();
	void SetShowGrid(BOOL show);
	void SortCFCExecute(CArray<CCFCElementIDAndExecuteOrder,CCFCElementIDAndExecuteOrder&> &OrderArray);
	COLORREF GetColorGridPoint();
	void DrawViewGrid(CDC *pDC);
	void AddCFCError(CError *pCFCError);
	void GetInputTypeByInputPin(CCFCInputPin *pInputPin,int &iIECType,CString &strIECType);
	CCFCElementList*GetCFCLabelList();
	void CreateComplicatedVarForMOV(CString strType,CCFCBox* pCFCBox);
	void GetInputTypeOfMOV(CCFCBox *pCFCBox,int iIECType,CString strIECType);
	BOOL CheckLabelRedefined();
	void CreateTempInfoForDispatchingOffset();
    //added by huweiguo 2012.03.13 for undo/redo count
	void DealWithSorb(CLinkLineGroupCmd*&);
    void DealWithSorb();
    //end added
	CCFCPin * FindNearByPin(CCFCPin *pCFCPin);
	void DeleteTempVarOfOperator(CCFCBox *pCFCBox);
	void NotifyOperatorTempVarChanged(CCFCBox *pCFCBox);
	CString GetBitShiftOperatorType(CCFCBox *pBox);
	CString FindMaxPriorityPinType(CCFCBox *pCFCBox);
	void CreateTempVarForOperator(CString strType,CCFCBox *pCFCBox);
	//added by yhx on 2010.07.22 
	tagHccTreeNode* GetInputLeftValueTreeNodeByInputPin(CCFCInputPin *pInputPin);
	void CreateTempVarForAddrOperator(CCFCBox *pCFCBox);
	void CreateTempVarForValOperator(CCFCBox *pCFCBox);
	//end add
	void CheckPinCompatibility(CCFCBox *pCFCBox);
	void CreateTempVarForFunction(CCFCBox *pCFCBox);
	void CreateEnEnoVarForBox(CCFCBox *pCFCBox);
	void CreateInitVarForBox(CCFCBox *pCFCBox);
	void CreateCFCTempInfo();
	void FindVar();
	void RemoveAllTempInfoGeneratedByLastCompiling();
	int GetCFCClipBoard();
	void OnEditPaste();
	void OnEditCopy();
	void OnEditCut();
	CRedoUndoCmdList * GetUndoCmdList();
	void ReSetInputPinLineShape(CCFCInputPin *pInputPin);
	void ReSetOutputPinLineShape(CCFCOutputPin *pOutputpin);
	void DrawLineWithMouseMove(CPoint ptmouse);
	void SetElementOldOrder();
	void FillElementWithOrderList(CCFCElementList *pList);
	void ReSetExecuteOrderWhenUndoDeleteElement(CCFCElementList *pList,CCFCElementList *pSumList);
	int GetSelectElementNumBeforeOrder(int order,CCFCElementList *pList);
	int GetMaxOrder();
	void SetMaxOrder(int order);
	CCFCElement * GetCFCElementByExecuteOrder(int order);
	void OnDataflowOrder();

	void OnBackwardOrder();
	void OnForwardOrder();
	void OnTailOrder();
	void OnHeadOrder();
	BOOL GetShowOrder();
	void SetShowOrder(BOOL bShow);
	void DealWithModifyBoxType();
	void DealWithModifyText();
	void OnlyEditUndo();
	BOOL GetEditState();
	CScrollView * GetView();
	void ModifyCFCElementText(CCFCElement *pCFCElement);
	void OnSetEno();
	void DeleteInputPin(CCFCPin *pCFCPin);
	void DeleteLine(CCFCPin *pCFCPin);
	void DeleteCFCElement();
	void MoveElement(CCFCElementList *pCFCElementList,CPoint ptBegin,CPoint ptEnd);
	//amended by huweiguo 2012.12.03 for bug fugai
	BOOL CanMoveSingleElement(CCFCElement *pCFCElement,BOOL flag=FALSE);
	//end amended
	BOOL CanMoveElement();
	void DealWithMoveElementInOnLButtonUp(UINT nFlags,CPoint ptLogic);
	void MoveElement(CPoint ptBegin,CPoint ptEnd);
	void DealWithMoveElementInOnMouseMove(UINT nFlag,CPoint ptLogic);
	BOOL DealWithMoveElementInOnLButtonDown(CPoint ptLogic);
	BOOL ScrollCFCView(CPoint point,CRect rtClient);
	CCFCElement* RemoveElementFromMap(CCFCElement *pCFCElement);
	void Redo();
	void Undo();
	void Delete();
	CCFCOutputPin* GetOutputPinByIDAndIndex(int iElementID,int iIndex);
	CCFCInputPin* GetInputPinByIDAndIndex(int iElementID,int iIndex);
	CCFCElement * GetCFCElementByID(int iElementID);
	BOOL CanLinkLineBetweenTwoPins(CCFCPin *pPinBegin,CCFCPin *pPinEnd);
	void DealWithDrawLineInOnLButtonUp(CPoint ptLogic);
	void OnLButtonUp(UINT nFlags, CPoint point);
	void DealWithDrawLineInOnMouseMove(CPoint ptLogic);
	BOOL DealWithDrawLineInOnLButtonDown(CPoint ptLogic);
	void OnInitialUpdate();
	void InvalidateRect(CRect rtInvalidate);
	int GetPinLineOffset();
	static COLORREF GetColorNormal();
	static COLORREF GetColorConst();
	static COLORREF GetColorInvalidText();
	static COLORREF GetColorVariable();
	static COLORREF GetColorKeyWord();
	static COLORREF GetColorSelectPin();
	static COLORREF GetColorSelectElement();
	void AddSelectElement(CObject *pObject);
	void RemoveAllSelect();
	void SelectCFCElement(UINT nFlags,CPoint ptLogic);
	int GetFontHeight();
	BOOL CanPlaceElement(CCFCElement *pCFCEleemnt);
	unsigned short GetElementID();
	BOOL AddElementToMap(CCFCElement *pCFCElement, int iPos = -1);
	BOOL DealWithInsertingElement(CPoint ptLogic);
	void CancelInsertMode();
	void OnRButtonDown(UINT nFlags, CPoint point);
	void PrepareElementGraphToInsert(CPoint point);
	COLORREF GetDrawStringColor(CString str);
	int GetStringWidth(CString str,CDC *pDC=NULL);
	CPoint CalcGridTopLeftPoint(CPoint pt);
	int GetGridWidth();
	void DrawElementGraphToInsert(CDC *pDC);
	COLORREF GetTextShowColor(int em_Text_Type);
	void CreateTextFont(LOGFONT logFont);
	virtual void SetOffLineShape();
	virtual void SetOnLineShape();
	void DrawOffLinePOU(CDC *pDC);
	void DrawOnLinePOU(CDC *pDC);
	void OnDraw(CDC *pDC);
	void OnAddInputPin();
	void OnSetPinNot();
	void OnSetOutput();
	void OnMouseMove(UINT nFlags, CPoint point);
	void OnLButtonDown(UINT nFlags, CPoint point);
	void OnInsertReturn();
	void OnInsertOutput();
	void OnInsertLabel();
	void OnInsertJump();
	void OnInsertInput();
	//added by huweiguo 2013.01.06 for xuqiu
	void OnInsertNetInput();
	//end added
	void OnInsertComment();
	void OnInsertBox();
	void SetView(CScrollView *pScrollView);
	virtual void Serialize(CArchive &ar);
	void OnLButtonDblClk(UINT nFlags, CPoint point);
	CCFCPOU();
	virtual ~CCFCPOU();
	//syntax errors checking
	virtual BOOL CheckPOUErrors();
	//compile pou to obj
	virtual BOOL CompilePOU();
	void SetGridWidth();
	//added by huweiguo 2012.03.27 for GDI Bug
    CPOUDetail *GetPOUdetail()
	{
         return m_pPOUDetail;
	}
	//end added
	int m_iEditIndex; //输入助手时，记录一下当前输入字符位置的索引
	static vector<ROW_CROSS_INFO_t> m_vVarCrossTableRowInfo;
	static CFBParaConfig m_fbParaCfg;
	vector<ROW_PARA_INFO_t> m_vFbParaRowInfo;
	BOOL m_bCutFlag;
	BOOL m_bAutoFlow;

    //added by huweiguo 2012.07.17 for XML
	BOOL WriteXMLInputContent(CFile *pFile,CCFCInput*pinput);
	BOOL WriteXMLOutputContent(CFile *pFile,CCFCOutput*poutput);
	BOOL WriteXMLCommentContent(CFile *pFile,CCFCComment*pcommet);
	BOOL WriteXMLLabelContent(CFile *pFile,CCFCLabel*plabel);
	BOOL WriteXMLBoxContent(CFile *pFile,CCFCBox*pbox);
	BOOL WriteXMLJumpContent(CFile *pFile,CCFCJump*pjump);
	BOOL WriteXMLReturnContent(CFile *pFile,CCFCReturn*preturn);
    BOOL WriteXMLPOULogicContent(CFile *pFile);  
    BOOL WriteXMLLineContent(CFile *pFile);
    WriteXMLLineLogicContent(CFile *pFile, CCFCLine *pLine);
   //end added

	//added by huweiugo 2012.08.23 for data ruohua
	BOOL CanBeRuoHua(int  IECtype);
    BOOL CanBeInMath(int  IECtype);
    int  MODMaxType(int iDataType1,int  iDataType2);
	//end added

	 //added by huweiguo 2012.09.10 for default dot
	CFBVARList*GetFBVARList(){ return ppdialog;}
	// end added

	 //added by huweiguo 2012.08.27 for bug
	 void ResetFront();
     void ResetView(BOOL& flag);
	 void ResetView_ChangePaper();
	 //end added

     //added by huweiguo 2012.10.08 for bug	 
	 void SetFrontSize(BOOL flag);
     //end added

	 //added by huweiguo 2012.09.13 for bug 3340
	 //void SetPouCopyFlag(BOOL flag){ CopyFlag=flag;}
     void ResetCFCElementShapeforCopy();
     //end added

	 //added by huweiguo 2012.10.09 for bug
	 void SetdirectFlag(int flag){m_olddirect=flag;}
	 int GetdirectFlag(){return m_olddirect;}
	 //end added
	 
	 //added by huweiguo 2012.10.09 for bug
	 void SeOriFrontSize();
	 void SeCurFrontSize();
	 //end added
	 
	 //added by huweiguo 2012.10.15 for bug
	 CMapIntToCFCElement*GetElementMap()
	 {
		 return m_pMapIntToCFCElement;
	 }
	 //end added

    //added by huweiguo 2012.10.26 for bug 3316
    void ResetElementSize();
    //end added

    //add by qwq for help
    void SetHelpInfo(void);
    void SetHelpInfo_1(void);
    //end add by qwq for help

    //added by huweiguo 2012.12.13 for bug fugai
    void elementfugai();
    void ElementFugaiSelect();
    //end added

    //added by huweiguo 2012.12.26 for dayin
    void PrintSet();
    void OnPrintSet();
    void PrintSelectSet(CString state);
    //end added

    //added by huweiguo 2012.12.19 for bug dayin
    void SetPrintInfo(   int piX,int piY,CSize ppaper)
    {
	   iX=piX;
	   iY=piY;
	   m_paper=ppaper;
    }
    //end added

    //added by huweiguo 2014.10.15 for xuqiu
    CPoint GetPrintInfoIXIY()
    {
       CPoint pp;
       pp.x=iX;
       pp.y=iY;
       return pp;
    }
    CSize GetPrintcurentpage()
    {
       return m_papercurent;
    }
    void DrawVirtualConstructionRect(CDC*pDC);
    void DrawVirtualRect(CDC*pDC);
    //end added

    //added by huweiguo 2013.2.01 for bug 4105
    void OnWhatIsThis();
    //end added

    //added by huweiguo 2013.02.28 for bug 
    BOOL GetMoveFlag(){return m_bMoveElement;}
    //end added

    //added by huweiguo 2013.04.22 for 功能块在线监视
    bool CollectFBonlineVar(CString strPinName, CString strBoxText,CBaseDB *&pPinVar);
    //end added

    //added by huweiguo 2013.04.27 for bug
    void EditClear();
    //end added

    //added by huweiguo 2013.06.05 for bug 5559
    CCFCElement *GetElementPointer(){return m_pCFCElement;}
    void SetElementPointer(CCFCElement *element){m_pCFCElement=element;}
    //end added

    //added by huweiguo 2013.06.08 for 代码优化
    void TransString(CString&deststring);
    //end added

    //added by huweiguo 2013.6.18 for 代码优化
    CMapIntToCFCElement*GetFGElementMap()
    {
        return m_pMapIntToCFCElementFG;
    }

    CMapIntToCFCElement*GetNFGElementMap()
    {
        return m_pMapIntToCFCElementNFG;
    }
    //end added

    //added by huweiguo 2013.11.13 for xuqiu
    void OnViewPanel();
    void OnLocateMainVar();
    //end added

    //added by huweiguo 2013.10.15 for M5 升级
    void ImportM5TOM6RefeshBoxContent();
    void M5TOM6Replace();
    //end added

   //added by huweiguo 2014.10.17 for xuqiu
   void ElementBeyondLimit();
   void ConstructionRectlimit();
   //end added

//add by cf 2015.3.10
public:
	CString GetElemnetType(CCFCElement* pELement); //根据元件得到其元件类型名称
    BOOL ImportTemplateLogic(CString strPathName, int iInstanceIndex);
    BOOL CreateTemplateInfos (BOOL bInstance);
    BOOL CModulePouImpDataFill (std::list<tagTemplateFun> lst_map);
    BOOL CModulePouExcelImport (CString strModuleName, selementlistversion* plstElement);
    BOOL CModulePouVarReplace (CString strModuleName);
    void GetStructureList ();
    BOOL CInstancePouRefresh ();
    virtual BOOL EliminateLinkingToTempalte();
    void SetTemplateSelect(CString strTemplateName, int iTemplateIndex);
    CString ParseTemplateXML( CString strPathName,CCFCElementList*& plstElement, UINT uType = 0);
    
    void LineToElements( CCFCLineList &TempLineList );
    void ViewModuleInfo();
    //获取引用的模板名，键值为模板名，值均为0
    virtual BOOL GetReferenceTemplates(CMap<CString,LPCTSTR,int,int>& mapTemplate);
	CPOUTreeNode* GetSelectedNode(CString strNodeName);
	CString GetCFCVSDPath(CString strPOUName);
	void CollectCrossDBMsg();
	BOOL CollectFBParaMsg();

	//added by huweiguo 2015.05.19 for bug 17158
public:
     void RefreshStructureList();
	//end added

    //added by huweiguo 2015.01.13 for FBD
public:
    static  int ImportXMLForFBD2CFC(CCFCPOU *pCFCPOU, CString strPathName, XMLTagNode* pTagNode = NULL);
	void ParseElementInfoForFBD2CFC(XMLTagNode *pXMLTagNode,ElementInfo*tElementInfo,CCFCLineList*TempLineList,CCFCElementList*pCFCElementList);
	void LinkAllLineForFBD2CFC(CCFCLineList*TempLineList);
	int AdjustElementPositionForFBD2CFC(CPoint  topleft,CCFCElementList*pCFCElementList,int LabelComWidth);
    void SortElementOrderAddIDForFBD2CFC(CArray<CCFCElementIDAndExecuteOrder,CCFCElementIDAndExecuteOrder &> &OrderArray,CCFCElementList*pCFCElementList);
    void ReCalInputForFBD2CFC(CCFCElement*pCFCElement);
    int CalInputMaxWidthForFBD2CFC(int &width,CCFCElement*pCFCElement);
    CCFCLine* JumpReturnLinkEspRealizeForFBD2CFC(POSITION pos,CCFCLineList*TempLineList);
	int GetGridNumberForFBD2CFC(CCFCElement*pelement,int ID);
	CCFCElement*GetAssignInputElementForFBD2CFC(CCFCElement*pCFCElement);
    int GetOutputInGridNumberForFBD2CFC(CCFCElement*pelement,int ID);
	void SetPinNegateAttributeForFBD2CFC(CString PinState,CCFCElement*pCFCElement);
	void SetNetworkPinNegateAttributeForFBD2CFC(CCFCElementList*pCFCElementList,CCFCLineList*TempLineList);
    int GetElementNegateForFBD2CFC(int ID,CCFCLineList*pLineList);
    int GetJRAElementNegateForFBD2CFC(POSITION pos,CCFCLineList*pLineList);
    CCFCElement*GetLinkElementForFBD2CFC(CCFCElement*pCFCElement,int&index,CCFCLineList*pLineList);
    int GetBoxInputPinElementNegateForFBD2CFC(int ID,CCFCLineList*pLineList,int index);
    int GetOutputInGridNumber1ForFBD2CFC(CCFCElement*pCFCElement);
    int GetBoxAfterElementPositionForFBD2CFC(CCFCElement*pCFCElement,int ID);
    int GetBoxBeforElementPositionForFBD2CFC(CCFCElement*pCFCElement);
	int BeyondViewTipForFBD2CFC();
	void SetFBPinsNameForFBD2CFC();
	void RemoveAssignFromMapForFBD2CFC();
	BOOL ElementNumberLimitForFBD2CFC(CCFCElement*pCFCElement);
    //end added

public:
	//处理移动连线操作
	BOOL DealWithMoveLineInOnLButtonUp(CPoint ptLogic);
    void JustPointInLineRange(CCFCLine*pCFCLine,CPoint ptLogic);
	void ArrowShapeChage(CPoint ptLogic);
    void DealWithMoveLineInOnMouseMove(CPoint ptLogic);
	void CopySelectLinePoint();
    void TragLine(CPoint ptLogicBegain,CPoint ptLogicEnd);
    CCFCLine* LineInfoReset();
    CCFCLine*GetSelectLine();
    void OverlayLineMerge(CCFCLine*pCFCLine,CPoint ptLogicBegain,CPoint ptLogicEnd,int Interval,int BegainPointIndex,int EndPointIndex);
	void CopyLinePointToEndPoint(CCFCLine*pCFCLine);
    void LineTragFlagSet(CCFCElementList *pCFCElementList, CPoint ptLogicBegain,CPoint ptLogicEnd);
    void MoveElementLinePolyFresh(CCFCLine*pCFCLine,CPoint ptOffset);
    void AddLinesToEachOtheList(CCFCLine*pCFCLine);
	void UndoRedoLineInfoFresh(CRedoUndoCmd*RedoUndoCmd,BOOL flag);
	void UndoRedoLineZoomPolysCal(int iOldGrid);
	void LineZoomPolysCal(CCFCLine*pCFCLine,int iOldGrid);
    CPoint GetTopLeftPointofLine(CCFCElementList *pCFCElementList,CPoint ptTopLeft);
    CPoint GetBottomRightPointofLine(CCFCElementList *pCFCElementList);
    BOOL CanMoveElementRelevancyLine(CCFCElement *pCFCElement,CCFCLineList*pCFCLineList);
	void OLbuttonDblClkSelectLineTrans(CPoint point);
    void OLbuttonDownSelectLine(CPoint point);
	void CalTime();
	void ResetSelectLineState();

public:
    void UpdataBoxType(CString strBoxName,CString strNewName);

    //add by qwq for cmp
	bool CMPCheckBoxPin(CCFCBox* pBox1,CCFCBox* pBox2);
    void CMPFillLackElement(CCFCPOU* pPOU1,CCFCPOU* pPOU2);
	void OnPOUCmp(CCFCPOU *pPOU);
    //end add by qwq for cmp
    
private:
    void OnImportInput( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement );
    void OnImportOutput( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement, CCFCLineList& TempLineList);
    void OnImportBox( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement, CCFCLineList& TempLineList);
    void OnImportComment( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement );
    void OnImportLabel( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement);
    void OnImportReturn( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement, CCFCLineList& TempLineList);
    void OnImportJump( XMLTagNode * pElementTagNode, CCFCElementList*& plstElement, CCFCLineList& TempLineList);
	void OnImportLine(XMLTagNode * pElementTagNode, CCFCLineList& TempLineList);
    BOOL ReplaceVarOfInstance(list<TemplateFunVarInfo>& lstExcelData, CCFCElementList*& plstXMLData, CString strTemplateName);
    
    CString GetXMLTemplateName(CString strPathName);
    CString GetXMLTemplateAmendTime(CString strPathName);
    void ClearAllTemplateElement(BOOL bIsDelElementFromMemery = TRUE);
    void UpdateInstances(CString& strXMLPath);
    void UpdateStructureList(list<TemplateFunVarInfo>& lstVarInof);
    BOOL OnSeriaseStructureList(CArchive& ar);
    void OnSeriaseForTemplate(CArchive& ar);
    BOOL OnSeriaseTemplateMap(CArchive& ar);
    void ResetElementID(CCFCElement*& pElement);    
    void ResetElementOutputPinID( CCFCOutputPin*& pOutputPin, int iID); 
    void ResetElementInputPinID( CCFCInputPin*& pInputPin, int iID );
    CCFCElement* GetTemplateElementByID(int iID);
    CCFCOutputPin* GetTemplateOutputPinByIDAndIndex(int iElementID,int iIndex);
	CCFCInputPin* GetTemplateInputPinByIDAndIndex(int iElementID,int iIndex);
    
    void AdjustImportInstanceElementPostion(CCFCElementList*& plstElement);
	//added by huweiguo 2015.11.30 for bug19477
	void AdjustImportInstanceElementXPostion(CCFCElementList* plstElement);
	//end added
    int GetBottomMostElementY();
    int GetLeftMostElementForModule(CCFCElementList*plstElement);
    BOOL JudgeElementAdaptCurrentPaperSize(CCFCElement*& pElement);
    BOOL IsElementPointInRect(CPoint point);
    void DelImportFailElementLstFromModulMap(CString strModulName);
    BOOL IsExportSameTemplateVar(CString mElementType,CString strTemplateVarName, tagTemplateFun* pTemplateFun);
    //end add

    //add by qwq for cmp
public:
    CCFCElementList m_ListCMPLackCFCElement;

    //end add by qwq for cmp
	//POU中选中的元素(可能是多个元件也可能是引脚被选中),不需要保存
	CCFCPOUMultiSelected m_MultiSelect;	
	//归档
	CPOUDetail *m_pPOUDetail;
    void AlignElement(char AlignType);//add by qwq for align 2014.8.29

    CCFCElement*GetCFCElementByIDFromModule(CCFCElementList *pCFCElementList,int ID);
    CCFCInputPin *GetInputPinByIDAndIndexFromModule(CCFCElementList *pCFCElementList,int ID,int index);
    CCFCOutputPin*GetOutputPinByIDAndIndexFromModule(CCFCElementList *pCFCElementList,int ID,int index);
    
public:
    //added by huweiguo 2012.09.16 for default dot	
    CFBVARList* ppdialog;
	friend CFBVARList;
    // end added

	int m_olddirect;

    //added by huweiguo 2012.12.13 for bug element fugai
	CMapIntToCFCElement	*m_pMapIntToCFCElementNFG;	
	CMapIntToCFCElement	*m_pMapIntToCFCElementFG;	
    //end added

    //added by huweiguo 2012.12.19 for bug dayin
	int iX;
	int iY;
	CSize m_paper;
	CSize m_papercurent;
    //end added

    //add by cf 2015.3.10    
    std::list<tagTemplateFun> m_structure_List;//存放导入excel数据
    std::list<TemplateFunVarInfo> m_lstTemplateVarInfo;//存放实例变量，为了模板更新
    int m_iYofMostRightAndBottomElement;//当前CFC视图中最底端元件的y坐标，单位：像素
    int m_iYofTopMostElement;//当前模板中最顶端的元件的y坐标，单位：栅格数
    int m_iInstanceIndex;//记录当前导入实例的索引，与Excel中序号一致
    BOOL m_bCurrentInstanceImportCompletely;//记录当前导入实例是否导入完整
    BOOL m_bCurrentInstanceInsertElement;
	
public:
    //存放模板实例元件,模板名为键值，值是2级链表结构，第一级表示模板实例，第二级表示实例中所有元件
    CMap<CString,LPCTSTR,CList<selementlistversion*,selementlistversion*&>*,CList<selementlistversion*, selementlistversion*&>*&> m_ModuleElementListMap;
    //end add
public:
	CArray<CPoint, CPoint> m_PolyLinePointsBegin;//原来连线的折点数组
	CArray<CPoint, CPoint> m_PolyLinePointsEnd;//拖动后的连线折点
	taglineInfostructList* m_rangeOuterLines;
	CCFCLineList*m_pCFCLineList;
	CCFCLine*m_pCFCSelectLine;
	BOOL m_bUndoFlag;
	BOOL m_bRedoFlag;
    
private:
	BOOL m_bMoveLine;//标识移动线操作
	BOOL m_bHaveMovedLine;//标识是否进行了线移动
	BOOL m_WEFlag;
    BOOL m_NSFlag;
	CPoint m_Line_Segment_BegainPoint;
    CPoint m_Line_Segment_EndPoint;

private:
	//added by congshuai on 2010.12.14
	BOOL m_bFindNextFlag;//查找下一个标记
	BOOL m_bReplaceFlag;//替换标记
	void FlushRedoCmdList();	
    //added by yhx on 2010.11.29
    void GetInputIecTypeByInputPin(CCFCInputPin *pInputPin,int &iIECType,CString &strIECType);
    void GetBoxVarTypeFormPinIndex(CCFCBox* pCFCBox,int iPinIndex,int &iMaxType,CString &strMaxType);
    //added by yhx on 2011.05.24 for shijia ;we creat tempVar in order of elementID
    void BubbleSort(CArray<int,int> &pList);
	//end add
    void PromoteDT_ZO();
    //存储所有的本POU的元件，一个以int为索引的MAP
	CMapIntToCFCElement	*m_pMapIntToCFCElement;	
    CMapIntToCFCElement m_MapForTemplate;//记录模板中元件，为后续恢复连线使用
	//存储具有逻辑元素的ID和对应的执行逻辑序号，目的为按照执行顺序生成中间逻辑时使用。
	CArray<CCFCElementIDAndExecuteOrder,CCFCElementIDAndExecuteOrder*> 
						m_ArrCFCElementIDAndExecuteOrder;														
	//插入元件类型
	enum_INSERTELEMENT_TYPE m_emInsertElementType;
	//collect label in the pou
	CCFCElementList *m_pCFCLabelList;
	//for redo undo
	//undo list
	CRedoUndoCmdList *m_pUndoCmdList;
	//redo list
	CRedoUndoCmdList *m_pRedoCmdList;
	CModifyTextEdit *m_pModifytextedit;
	//a CCFCView will be associated with a CCFCPOU，
	//the varibale actually is a CScrollView type
	CScrollView *m_pView;
	//for drag something to view
	CViewDropTarget *m_pdropTarget;
	COleDataObject *m_pOleDate;
	CCFCBox *m_pBoxDragedFromLib;
	//the element to be insert for drawing the graph
	CCFCElement *m_pCFCElementToInsert;

	//by which font text is drew
	//comment by huweiguo 2012.03.30 for GDI  bug
	//CFont m_textFont;
	// end comment

	//grid width
	int m_iGridWidth;

	//maximize element id,initialied by 0
	unsigned short m_iMaxID;

	//draw line information*********************************************
	CPoint m_ptLineBegin;
	CPoint m_ptLineEnd;
	CCFCPin *m_pPinBegin;
	CCFCPin *m_pPinEnd;
	//******************************************************************
	//move element mark
	BOOL m_bMoveElement;
	BOOL m_bHaveMoved;
	CPoint m_ptOriginalPosition;
	CPoint m_ptMoveBegin;
	CPoint m_ptMoveEnd;
	
	//multi select by draging rubber rect
	BOOL m_bCaptured;
	BOOL m_bmultiselect;
	CPoint m_ptrubberbegin;
	CPoint m_ptrubberend;
	CRect m_rubberrect;
	//modify text edit
	
	//Modify FB BOX name
	BOOL m_beditFBName;
	//Modify Alias
	BOOL m_beditAlias;
	//Modify Comment
	BOOL m_beditComment;
	//identify the modifying state of element 
	BOOL m_bedit;
	//set pou detail edit state
	BOOL m_bDetailEdit;
	//for edit pou detail
	int m_iPOUDetailindex;
	//communicate for edit element
	CCFCElement *m_pCFCElement;
	//show order or not
	BOOL m_bShowOrder;
	//show grid or not
	BOOL m_bShowGrid;
	//show ENO default or not
	BOOL m_bShowENO;
	//set hit check or not
	BOOL m_bHitCheck;
	//max order
	int m_iMaxOrder;
    int m_iOldMaxOrder;//导入模板实例时，元件执行顺序号增加的步长
	//CFC私有剪贴板
	int m_CFC_CLipboard;
	//record paste operation time
	int m_ipasteindex;
	//复制时单元格长度
	int m_icopygridwidth;

	//视图缩放
	float m_ratio;//缩放比例
	int m_iviewwidth;//view 宽度
	int m_iviewheight;//view 长度

	//纸张
	CString m_strPaperType;

	//draw
	CCFCElementList *m_pDrawElementList;
	
	//查找替换相关
	FindInfoList *m_pFindResultsList;
	//查找下一个索引
	FindInfo m_FIindex;
	//全部替换次数
	int m_iReplaceCount;
	//防止拖拽时窗口注册两次
	BOOL m_bRegist;

	//详细对话框 给变量定义
	CDlgVarDetail *m_pChild;

	//库变化标志
	BOOL m_bLibChange;
	//tip
	CToolTipCtrl *m_ptpCFCTip;
	//分割窗口隐藏标识
	BOOL m_bShowSplitterWnd;
	//标识是否重设纸张
	BOOL m_bResetPaperSize;
	//标识变量自动声明对话框弹出
	BOOL m_bAutoVarDeclare;
	//标识变量同步
	BOOL m_bUpDateForSycWithVar;
	//标识查找下一个和替换到头了
	BOOL m_bFindReplaceEnd;
	//added by huweiguo 2012.05.25 for bug 2051
};